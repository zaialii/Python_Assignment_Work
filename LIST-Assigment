{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "52ad94f0-fa24-44ac-9e8d-180407357d01",
   "metadata": {},
   "source": [
    "1. Write a program that accepts a list from user and print the alternate element of list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "4a0d2732-fdbd-4ec9-ae2d-7d38cdd53591",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Provide a series of items separated by spaces:  a l i k h a n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Items at alternate positions are: ['a', 'i', 'h', 'n']\n"
     ]
    }
   ],
   "source": [
    "def get_alternate_items():\n",
    "    input_data = input(\"Provide a series of items separated by spaces: \").split()\n",
    "    alternate_items = input_data[::2]\n",
    "    print(\"Items at alternate positions are:\", alternate_items)\n",
    "\n",
    "get_alternate_items()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a54f7d5e-8f48-4d7a-b9a8-c3b5c236606b",
   "metadata": {},
   "source": [
    "2. Write a program that accepts a list from user. Your program should reverse the content of list and display it. Do not use reverse() method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "897f0011-a1a4-46c3-aafa-5a2164662a69",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Provide a series of items separated by spaces:  a l i k h a n\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Items in reverse order are: ['n', 'a', 'h', 'k', 'i', 'l', 'a']\n"
     ]
    }
   ],
   "source": [
    "def invert_items():\n",
    "    input_items = input(\"Provide a series of items separated by spaces: \").split()\n",
    "    reversed_items = list(reversed(input_items))\n",
    "    print(\"Items in reverse order are:\", reversed_items)\n",
    "\n",
    "invert_items()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "195beb67-ef03-49fd-96bf-9bdc3b1f64ca",
   "metadata": {},
   "source": [
    "3. Find and display the largest number of a list without using built-in function max(). Your program should ask the user to input values in list from keyboard."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "e90bd7d0-89ad-4463-939b-03a01a9c5a02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter numbers separated by spaces:  21 3 45 67 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The largest number is: 67\n"
     ]
    }
   ],
   "source": [
    "def find_largest_number():\n",
    "    numbers = list(map(int, input(\"Enter numbers separated by spaces: \").split()))\n",
    "    max_number = numbers[0]\n",
    "    for value in numbers:\n",
    "        if value > max_number:\n",
    "            max_number = value\n",
    "    print(\"The largest number is:\", max_number)\n",
    "\n",
    "find_largest_number()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a451c63-74ae-4e4e-8d95-01a84dcb03a9",
   "metadata": {},
   "source": [
    "4. Write a program that rotates the element of a list so that the element at the first index moves to the second index, the element in the second index moves to the third index, etc., and the element in the last index moves to the first index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "6b2f5f57-8fc3-4a54-8030-16526ea3f8ed",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a series of items separated by spaces:  ali khan zai\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List after left rotation: ['khan', 'zai', 'ali']\n"
     ]
    }
   ],
   "source": [
    "def shift_list_left():\n",
    "    elements = input(\"Enter a series of items separated by spaces: \").split()\n",
    "    if elements:  \n",
    "        shifted_list = elements[1:] + elements[:1]\n",
    "        print(\"List after left rotation:\", shifted_list)\n",
    "    else:\n",
    "        print(\"The list is empty. No rotation performed.\")\n",
    "\n",
    "shift_list_left()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "86abf138-88bc-4cb0-a944-26e083aa09e2",
   "metadata": {},
   "source": [
    "5. Write a program that input a string and ask user to delete a given word from a string."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "1b05f5b9-db18-4365-9f31-3be0eb71f4d7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a string:  helo world\n",
      "Enter the word to remove:  helo\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "String after removing the word: world\n"
     ]
    }
   ],
   "source": [
    "def remove_word():\n",
    "    input_string = input(\"Enter a string: \")\n",
    "    word_to_remove = input(\"Enter the word to remove: \")\n",
    "    modified_string = \" \".join(\n",
    "        [word for word in input_string.split() if word != word_to_remove]\n",
    "    )\n",
    "    print(\"String after removing the word:\", modified_string)\n",
    "\n",
    "remove_word()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04f549b1-5844-4a42-8ea2-c298dc0d73f7",
   "metadata": {},
   "source": [
    "6. Write a program that reads a string from the user containing a date in the form mm/dd/yyyy. It should print the date in the form March 12, 2021."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "a4e395cd-36ae-4d56-ac29-f4dc9bc13fe1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a date in mm/dd/yyyy format:  1/1/25\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Formatted date: January 1, 25\n"
     ]
    }
   ],
   "source": [
    "def format_date():\n",
    "    date_input = input(\"Enter a date in mm/dd/yyyy format: \")\n",
    "    try:\n",
    "        month, day, year = map(int, date_input.split('/'))\n",
    "        months = [\n",
    "            \"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n",
    "            \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\n",
    "        ]\n",
    "        if 1 <= month <= 12 and 1 <= day <= 31:\n",
    "            print(f\"Formatted date: {months[month - 1]} {day}, {year}\")\n",
    "        else:\n",
    "            print(\"Invalid date! Please ensure the month is between 1-12 and the day is valid.\")\n",
    "    except ValueError:\n",
    "        print(\"Invalid input format! Please enter the date in mm/dd/yyyy format.\")\n",
    "\n",
    "format_date()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da72f95b-8aca-4bdc-a5ac-356ae7e7765e",
   "metadata": {},
   "source": [
    "7. Write a program with a function that accepts a string from keyboard and create a new string after converting character of each word capitalized. For instance, if the sentence is \"stop and smell the roses.\" the output should be \"Stop And Smell The Roses\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "46af7522-5897-4d17-9399-7ad94bd0728f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter a sentence:  khan\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Capitalized sentence: Khan\n"
     ]
    }
   ],
   "source": [
    "def capitalize_each_word():\n",
    "    sentence = input(\"Enter a sentence: \").strip()\n",
    "    if sentence:\n",
    "        capitalized_sentence = ' '.join(word.capitalize() for word in sentence.split())\n",
    "        print(\"Capitalized sentence:\", capitalized_sentence)\n",
    "    else:\n",
    "        print(\"No input provided. Please enter a valid sentence.\")\n",
    "\n",
    "capitalize_each_word()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a8b815c-33f6-4640-bd61-f32403a1a5c7",
   "metadata": {},
   "source": [
    "8. Find the sum of each row of matrix of size m x n. For example for the following matrix output will be like this:\n",
    "   Sum of row 1 = 32\n",
    "   Sum of row 2 = 31\n",
    "   Sum of row 3 = 63"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "2cb66077-c6a1-4e8e-a71f-406a0efcd101",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number of rows:  2\n",
      "Enter elements of row 1 separated by spaces:  1 2 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of row 1 = 6\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter elements of row 2 separated by spaces:  2 3 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of row 2 = 9\n"
     ]
    }
   ],
   "source": [
    "def sum_rows():\n",
    "    rows = int(input(\"Enter the number of rows: \"))\n",
    "    for i in range(rows):\n",
    "        row = list(map(int, input(f\"Enter elements of row {i + 1} separated by spaces: \").split()))\n",
    "        print(f\"Sum of row {i + 1} = {sum(row)}\")\n",
    "\n",
    "sum_rows()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0e4f4c4d-ceb1-4000-a5b7-a86742992c93",
   "metadata": {},
   "source": [
    "9. Write a program to add two matrices of size n x m."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "34eed85f-fafe-4812-9d14-efb690f7f7bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the number of rows and columns separated by space:  2 3\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the first matrix:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1 2 3\n",
      " 2 3 4\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter the second matrix:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1 4 5\n",
      " 4 3 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sum of matrices:\n",
      "2 6 8\n",
      "6 6 6\n"
     ]
    }
   ],
   "source": [
    "def matrix_addition():\n",
    "    rows, columns = map(int, input(\"Enter the number of rows and columns separated by space: \").split())\n",
    "    print(\"Enter the first matrix:\")\n",
    "    matrix_a = [[int(num) for num in input().split()] for _ in range(rows)]\n",
    "    print(\"Enter the second matrix:\")\n",
    "    matrix_b = [[int(num) for num in input().split()] for _ in range(rows)]\n",
    "\n",
    "    matrix_sum = [[matrix_a[row][col] + matrix_b[row][col] for col in range(columns)] for row in range(rows)]\n",
    "\n",
    "    print(\"Sum of matrices:\")\n",
    "    for row in matrix_sum:\n",
    "        print(' '.join(map(str, row)))\n",
    "\n",
    "matrix_addition()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73a5b2a4-a24c-408b-9bdb-94c264cbe453",
   "metadata": {},
   "source": [
    "10. Write a program to multiply two matrices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "a480b9ee-0eaf-45fe-a4bf-358ce3405da8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter rows and columns of first matrix:  2 2\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter first matrix:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1 2 3\n",
      " 2 3 4\n",
      "Enter rows and columns of second matrix:  2 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Enter second matrix:\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      " 1 2 4 \n",
      " 5 3 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Product of matrices:\n",
      "11\n",
      "17\n"
     ]
    }
   ],
   "source": [
    "def matrix_multiplication():\n",
    "    rows_a, cols_a = map(int, input(\"Enter rows and columns of first matrix: \").split())\n",
    "    print(\"Enter first matrix:\")\n",
    "    matrix_a = [[int(x) for x in input().split()] for _ in range(rows_a)]\n",
    "\n",
    "    rows_b, cols_b = map(int, input(\"Enter rows and columns of second matrix: \").split())\n",
    "    print(\"Enter second matrix:\")\n",
    "    matrix_b = [[int(x) for x in input().split()] for _ in range(rows_b)]\n",
    "\n",
    "    if cols_a != rows_b:\n",
    "        print(\"Matrix multiplication is not possible with these dimensions.\")\n",
    "        return\n",
    "\n",
    "    product_matrix = [[sum(matrix_a[i][k] * matrix_b[k][j] for k in range(cols_a)) for j in range(cols_b)] for i in range(rows_a)]\n",
    "\n",
    "    print(\"Product of matrices:\")\n",
    "    for row in product_matrix:\n",
    "        print(' '.join(map(str, row)))\n",
    "\n",
    "matrix_multiplication()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "600796d5-44f3-4c17-9be4-2bec35e63b18",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
