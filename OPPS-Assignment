{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "873ea0c7-0a96-4bb9-bd77-7696a0875402",
   "metadata": {},
   "source": [
    "# 1. Write a Python program to create a class called \"Person\" with properties for name, age and country. Include a method to display the person's details. Create two instances of the 'Person' class and display their details. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "3e1aec41-a563-46e3-807b-8c843884b780",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ali is 20 years old and lives in Pakistan\n",
      "Ali is 19 years old and lives in Pakistan\n"
     ]
    }
   ],
   "source": [
    "class Individual():\n",
    "    def __init__(self, full_name, years, nation):\n",
    "        self.full_name = full_name\n",
    "        self.years = years\n",
    "        self.nation = nation\n",
    "\n",
    "    def info(self):\n",
    "        return f'{self.full_name} is {self.years} years old and lives in {self.nation}'\n",
    "\n",
    "ind1 = Individual('Ali', '20', 'Pakistan')\n",
    "print(ind1.info())\n",
    "\n",
    "ind2 = Individual('Ali', '19', 'Pakistan')\n",
    "print(ind2.info())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e64e6c1d-d546-4b80-a919-7ef8582de812",
   "metadata": {},
   "source": [
    "# 2. Write a Python program to create a class called 'Rectangle' with properties for width and height. Include two methods to calculate rectangle area and perimeter. Create an instance of the 'Rectangle' class and calculate its area and perimeter. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "d805a522-779f-41ff-9e16-f6759e4ff6a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Area : 120 m²\n",
      "Perimeter : 58 m\n"
     ]
    }
   ],
   "source": [
    "class Rectangle():\n",
    "    def __init__(self, width, height):\n",
    "        self.width = width\n",
    "        self.height = height\n",
    "\n",
    "    def area(self):\n",
    "        return f'Area : {self.width * self.height} m²'\n",
    "\n",
    "    def perimeter(self):\n",
    "        return f'Perimeter : {2 * (self.width + self.height)} m'\n",
    "\n",
    "r = Rectangle(24, 5)\n",
    "print(r.area())\n",
    "print(r.perimeter())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d869d079-b96d-40a0-9dec-a7d7e2ffcd4d",
   "metadata": {},
   "source": [
    "# 3. Write a Python program that creates a class called 'Vehicle' with properties for make, model, and year. Include a method to display vehicle details. Create a subclass called 'Car' that inherits from the 'Vehicle' class and includes an additional property for the number of doors. Override the display method to include the number of doors. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d946e8e2-8f4b-4281-b9d6-4c6b1d0ad7b4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Honda Civic 2023 has 4 doors\n"
     ]
    }
   ],
   "source": [
    "class Vehicle:\n",
    "    def __init__(self, make, model, year):\n",
    "        self.make = make\n",
    "        self.model = model\n",
    "        self.year = year\n",
    "\n",
    "    def details(self):\n",
    "        return f'{self.make} {self.model} {self.year}'\n",
    "\n",
    "class Car(Vehicle):\n",
    "    def __init__(self, make, model, year, doors):\n",
    "        super().__init__(make, model, year)\n",
    "        self.doors = doors\n",
    "\n",
    "    def details(self):\n",
    "        return f'{self.make} {self.model} {self.year} has {self.doors} doors'\n",
    "\n",
    "v = Vehicle('Honda', 'Civic', '2023')  \n",
    "c = Car('Honda', 'Civic', '2023', 4)  \n",
    "\n",
    "print(c.details())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a87fbaa-5636-46a8-8900-1f2cfc03396b",
   "metadata": {},
   "source": [
    "# 4. Write a Python program that creates a class called \"BankAccount\" with properties for account number and balance. Include methods to deposit and withdraw money from the account. Create some instances of the \"BankAccount\" class, deposit some money, and withdraw a portion of it. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "19f5e11a-27e9-4db6-95d4-5f584cb5a4f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "200 has been deposited.\n",
      "Account Balance: 200\n",
      "Insufficient Balance\n"
     ]
    }
   ],
   "source": [
    "class BankAccount:\n",
    "    def __init__(self, ac_no):\n",
    "        self.ac_no = ac_no\n",
    "        self.balance = 0\n",
    "\n",
    "    def deposit(self, amount):\n",
    "        self.balance += amount\n",
    "        return f'{amount} has been deposited.\\nAccount Balance: {self.balance}'\n",
    "\n",
    "    def withdraw(self, amount):\n",
    "        if self.balance >= amount:\n",
    "            self.balance -= amount\n",
    "            return f'{amount} has been withdrawn.\\nAccount Balance: {self.balance}'\n",
    "        else:\n",
    "            return 'Insufficient Balance'\n",
    "\n",
    "b = BankAccount(222)\n",
    "print(b.deposit(200))  \n",
    "print(b.withdraw(300))  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d456f13-619d-4e02-ad7c-c5c7dcc95d0e",
   "metadata": {},
   "source": [
    "# 5. Write a Python program that creates a class called 'Shape' with a method to calculate the area. Create two subclasses, 'Circle' and 'Triangle', that inherit from the 'Shape' class and override the area calculation method. Create an instance of the 'Circle' class and calculate its area.Similarly, do the same for the 'Triangle' class. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "732bb762-4278-4567-9797-c2702a0d3a5a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'5027.2 m²'"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "class Shape():\n",
    "    def __init__(self):\n",
    "        pass\n",
    "\n",
    "class Circle(Shape):\n",
    "    def __init__(self, r):\n",
    "        self.r = r\n",
    "    def area(self):\n",
    "        return f'{3.142 * (self.r**2)} m²'\n",
    "\n",
    "class Triangle(Shape):\n",
    "    def __init__(self, b, h):\n",
    "        self.b = b\n",
    "        self.h = h \n",
    "    def area(self):\n",
    "        return f'{0.5 * (self.b * self.h)} m²'\n",
    "\n",
    "c = Circle(40)\n",
    "c.area()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5422310d-5d3b-4e6a-ba8a-aa8dc8b18cda",
   "metadata": {},
   "source": [
    "# 6. Write a Python program that creates a class called 'Employee' with properties for name and salary. Include a method to calculate annual salary. Create a subclass called 'Manager' that inherits from the 'Employee' class and adds an additional property for department. Override the annual salary calculation method to include bonuses for managers. Create two instances of the 'Manager' class and calculate their annual salary. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "62cf3241-054b-47f7-ad51-a14152048e87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Yearly Income: 1440000\n",
      "Bonus: 360000\n",
      "Yearly Income: 60000\n",
      "Bonus: 15000\n"
     ]
    }
   ],
   "source": [
    "class Worker():\n",
    "    def __init__(self, full_name, monthly_pay):\n",
    "        self.full_name = full_name\n",
    "        self.monthly_pay = monthly_pay\n",
    "    def yearly_income(self):\n",
    "        return f'Yearly Income: {self.monthly_pay * 12}'\n",
    "\n",
    "class Supervisor(Worker):\n",
    "    def __init__(self, full_name, monthly_pay, team):\n",
    "        super().__init__(full_name, monthly_pay)\n",
    "        self.team = team\n",
    "    def yearly_income(self):\n",
    "        return f'Yearly Income: {self.monthly_pay * 12}\\nBonus: {self.monthly_pay * 3}'\n",
    "\n",
    "supervisor1 = Supervisor('Imran', 120000, 'QC')\n",
    "print(supervisor1.yearly_income())\n",
    "\n",
    "supervisor2 = Supervisor('Ayan', 5000, 'QC')\n",
    "print(supervisor2.yearly_income())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fb68578f-52e4-4ad7-99dd-6a61f24c4532",
   "metadata": {},
   "source": [
    "# 7. Write a Python program that creates a class `Book` with properties for title, author, and publication year. Include a method to display book details. Create a subclass called 'Ebook' that inherits from the 'Book' class and includes an additional property for book price. Override the display method to include the book price. Create an instance of the 'Ebook' class and display its details. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "2af170f7-0e51-47a5-96ca-ccda4bd971eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name : Subtle Art of Not Giving a F*ck\n",
      "Writer : Mark Manson\n",
      "Year : 1997\n",
      "Cost : 1000\n",
      "        \n"
     ]
    }
   ],
   "source": [
    "class Item():\n",
    "    def __init__(self, name, writer, year):\n",
    "        self.name = name\n",
    "        self.writer = writer\n",
    "        self.year = year\n",
    "    def info(self):\n",
    "        return f'''Name : {self.name}\n",
    "                  Writer : {self.writer}\n",
    "                  Year : {self.year}\n",
    "        '''\n",
    "\n",
    "class DigitalBook(Item):\n",
    "    def __init__(self, name, writer, year, cost):\n",
    "        super().__init__(name, writer, year)\n",
    "        self.cost = cost\n",
    "    def info(self):\n",
    "        return f'''Name : {self.name}\n",
    "Writer : {self.writer}\n",
    "Year : {self.year}\n",
    "Cost : {self.cost}\n",
    "        '''\n",
    "\n",
    "ebook = DigitalBook('Subtle Art of Not Giving a F*ck', 'Mark Manson', 1997, 1000)\n",
    "print(ebook.info())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4c869f0-a07a-4265-a9eb-2a0857dc6c23",
   "metadata": {},
   "source": [
    "# 8. Write a Python program that creates a class called 'Animal' with properties for species and sound. Include a method to make the animal's sound. Create a subclass called 'Dog' that inherits from the 'Animal' class and adds an additional property for color. Override the make sound method to include the dog's color. Create an instance of the 'Dog' class and make it make its sound. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b73ed4ee-4be8-4009-b27a-20a09ec47d8d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Type: Mammal\n",
      "Noise: bark\n",
      "Color: Brown\n"
     ]
    }
   ],
   "source": [
    "class Creature():\n",
    "    def __init__(self, type_, noise):\n",
    "        self.type_ = type_\n",
    "        self.noise = noise\n",
    "    def make_noise(self):\n",
    "        return self.noise\n",
    "\n",
    "class Pup(Creature):\n",
    "    def __init__(self, type_, noise, hue):\n",
    "        super().__init__(type_, noise)\n",
    "        self.hue = hue\n",
    "    def make_noise(self):\n",
    "        return f'''Type: {self.type_}\n",
    "Noise: {self.noise}\n",
    "Color: {self.hue}'''\n",
    "\n",
    "dog = Pup('Mammal', 'bark', 'Brown')\n",
    "print(dog.make_noise())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "55c936c1-1482-49b0-9e10-e1e23cc199ef",
   "metadata": {},
   "source": [
    "# 9. Write a Python program that creates a class called Bank with properties for bank names and branches. Include methods to add a branch, remove a branch, and display all branches. Create an instance of the Bank class and perform operations to add and remove branches. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "6d351f0c-f9ca-4d5c-a476-b789a5a61b72",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Gulshan']\n"
     ]
    }
   ],
   "source": [
    "class Bank ():\n",
    "    def __init__(self,bank_name):\n",
    "        self.bank_name = bank_name\n",
    "        self.branches = []\n",
    "    def add(self,branch_name):\n",
    "        self.branch_name = branch_name\n",
    "        if self.branch_name not in self.branches:\n",
    "            self.branches.append(self.branch_name)\n",
    "        else:\n",
    "            return f'Branch already exists'\n",
    "    def remove (self,branch_name):\n",
    "        if branch_name in self.branches:\n",
    "            self.branches.remove(branch_name)\n",
    "        else:\n",
    "            return f'Branch doesnt exists'\n",
    "    def show(self):\n",
    "        return self.branches\n",
    "\n",
    "\n",
    "b= Bank('HBL')\n",
    "b.add('Hasan Square')\n",
    "b.add('Gulshan')\n",
    "b.remove('Hasan Square')\n",
    "print(b.show())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14012b4a-627b-4c2c-9147-c38d1229f0d6",
   "metadata": {},
   "source": [
    "# 10. Write a Python program that creates a class called Product with properties for product ID, name, and price. Include a method to calculate the total price by multiplying the price by the quantity. Create a subclass called PersonalCareProduct that inherits from the Product class and adds an additional property for the warranty period. Override the total price calculation method to include the warranty period. Create an instance of the PersonalCareProduct class and calculate its total price.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "fd638c55-9639-435d-927d-2d517c8f25f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter number of items:  23\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Price (including warranty cost): 28175\n",
      "Warranty Cost: 575\n"
     ]
    }
   ],
   "source": [
    "class Product():\n",
    "    def __init__(self, prod_id, name, price):\n",
    "        self.prod_id = prod_id\n",
    "        self.name = name\n",
    "        self.price = price\n",
    "\n",
    "    def price_cal(self):\n",
    "        quantity = int(input('Enter number of items: '))  # Convert to integer\n",
    "        return f'Total Price: {self.price * quantity}'\n",
    "\n",
    "class PersonalCareProduct(Product):\n",
    "    def __init__(self, prod_id, name, price, warranty):\n",
    "        super().__init__(prod_id, name, price)\n",
    "        self.warranty = warranty\n",
    "\n",
    "    def price_cal(self):\n",
    "        quantity = int(input('Enter number of items: '))  # Convert to integer\n",
    "        warranty_cost = 25 * quantity\n",
    "        total_price = (self.price * quantity) + warranty_cost\n",
    "        return f'''Total Price (including warranty cost): {total_price}\n",
    "Warranty Cost: {warranty_cost}'''\n",
    "\n",
    "p = PersonalCareProduct(23, 'khan', 1200, 22)\n",
    "print(p.price_cal())\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "727a019c-b7b0-4aab-a043-d0f8174c0d64",
   "metadata": {},
   "source": [
    "# 11. Write a Python program that creates a class called BankAccount with properties for account number, account holder name, and balance. Include methods to deposit, withdraw, and transfer money between accounts. Create multiple instances of the BankAccount class and perform operations such as depositing, withdrawing, and transferring money. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "8ad969df-2f4e-4cce-bec7-3222344db139",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter amount to deposit:  200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "200 has been deposited. \n",
      "Balance: 200\n",
      "200 has been transferred to Ali (Account No: 123).\n",
      "Your New Balance: 0\n",
      "Ali's New Balance: 200\n"
     ]
    }
   ],
   "source": [
    "class BankAccount:\n",
    "    def __init__(self, ac_no, ac_holder):\n",
    "        self.ac_no = ac_no\n",
    "        self.ac_holder = ac_holder\n",
    "        self.balance = 0\n",
    "\n",
    "    def deposit(self):\n",
    "        try:\n",
    "            deposit = int(input('Enter amount to deposit: '))\n",
    "            if deposit > 0:\n",
    "                self.balance += deposit\n",
    "                print(f'{deposit} has been deposited. \\nBalance: {self.balance}')\n",
    "            else:\n",
    "                print('Please enter a positive amount.')\n",
    "        except ValueError:\n",
    "            print('Invalid input. Please enter a numeric value.')\n",
    "\n",
    "    def withdraw(self):\n",
    "        try:\n",
    "            withdraw = int(input('Enter amount to withdraw: '))\n",
    "            if withdraw > 0:\n",
    "                if self.balance >= withdraw:\n",
    "                    self.balance -= withdraw\n",
    "                    print(f'{withdraw} has been withdrawn. \\nBalance: {self.balance}')\n",
    "                else:\n",
    "                    print('Insufficient balance.')\n",
    "            else:\n",
    "                print('Please enter a positive amount.')\n",
    "        except ValueError:\n",
    "            print('Invalid input. Please enter a numeric value.')\n",
    "\n",
    "    def transfer(self, amount, acc):\n",
    "        try:\n",
    "            if amount > 0:\n",
    "                if self.balance >= amount:\n",
    "                    self.balance -= amount\n",
    "                    acc.balance += amount\n",
    "                    print(f'{amount} has been transferred to {acc.ac_holder} (Account No: {acc.ac_no}).')\n",
    "                    print(f'Your New Balance: {self.balance}')\n",
    "                    print(f'{acc.ac_holder}\\'s New Balance: {acc.balance}')\n",
    "                else:\n",
    "                    print('Insufficient balance.')\n",
    "            else:\n",
    "                print('Please enter a positive amount.')\n",
    "        except ValueError:\n",
    "            print('Invalid input for transfer. Please enter a numeric value.')\n",
    "\n",
    "b1 = BankAccount(122, 'Ayan')\n",
    "b2 = BankAccount(123, 'Ali')\n",
    "b1.deposit()  \n",
    "b1.transfer(200, b2)  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4b140d5f-097a-44fb-89d4-2d8f2e28522e",
   "metadata": {},
   "source": [
    "# 12. Write a Python program that creates a class called University with properties for university name and departments. Include methods to add a department, remove a department, and display all departments. Create an instance of the University class and add and remove departments. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "95998087-b242-432c-9094-26abcaee96b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter department to add:  ee\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ee has been added to NED University.\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter department to remove:  aa\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "aa does not exist.\n"
     ]
    }
   ],
   "source": [
    "class Institution():\n",
    "    def __init__(self, name):\n",
    "        self.name = name\n",
    "        self.departments = []\n",
    "\n",
    "    def add_department(self):\n",
    "        department = input('Enter department to add: ')\n",
    "        if department not in self.departments:\n",
    "            self.departments.append(department)\n",
    "            print(f'{department} has been added to {self.name}.')\n",
    "        else:\n",
    "            print(f'{department} already exists.')\n",
    "\n",
    "    def remove_department(self):\n",
    "        department = input('Enter department to remove: ')\n",
    "        if department in self.departments:\n",
    "            self.departments.remove(department)\n",
    "            print(f'{department} has been removed from {self.name}.')\n",
    "        else:\n",
    "            print(f'{department} does not exist.')\n",
    "\n",
    "u = Institution('NED University')\n",
    "u.add_department()\n",
    "u.remove_department()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3bea6113-fd1b-4b14-9f3c-874ae8f4572b",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
